<?xml version="1.0"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<!-- $Id: //tools/build/checkstyle-4.1/checkstyle-config.xml#3 $ -->

<!--
     Checkstyle defaults are used where possible. See
     http://checkstyle.sourceforge.net/config.html for rule descriptions
     and default values. Comments in this file are used to explain deviations,
     not the general meaning of a rule.
-->

<module name="Checker">


  <property name="severity" value="warning"/>


  <!--
       SuppressionFilter rejects audit events for Check errors
       according to a suppressions XML document in a file.
  -->
   <module name="SuppressionFilter">
    <property name="file" value="${samedir}/checkstyle-suppressions.xml"/>
  	</module>


  <module name="SuppressionCommentFilter">
    <property name="offCommentFormat" value="CHECKSTYLE_OFF\: ([\w\|]+)"/>
    <property name="onCommentFormat" value="CHECKSTYLE_ON\: ([\w\|]+)"/>
    <property name="checkFormat" value="$1"/>
  </module>

  <!-- Checks that a package.html file exists for each package. -->
  <!-- TODO: switch to newer package-info.java approach. -->
  <module name="JavadocPackage">
    <property name="allowLegacy" value="true"/>
  </module>

  <!-- The StrictDuplicateCode rule is useful, but it is very slow -->
  <module name="StrictDuplicateCode">
    <property name="min" value="50"/>
  </module>

  <module name="NewlineAtEndOfFile" />
  <module name="Translation"/>
  <module name="FileLength"/>
  <module name="FileTabCharacter"/>

  <module name="RegexpMultiline">
    <property name="id" value="InvalidLogging"/>
    <property name="format" value="System\.(out|err)\.print(ln)?"/>
    <property name="message" value="Consider using logging instead of System.*.println"/>
  </module>

  <module name="RegexpMultiline">
    <property name="id" value="PrintStackTrace"/>
    <property name="format" value="printStackTrace"/>
    <property name="message" value="Consider using logging instead of printStackTrace"/>
  </module>

  <!-- chould be decided -->
  <!-- No @author tags -->
  <module name="RegexpMultiline">
    <property name="id" value="AuthorTag"/>
    <property name="format" value="@author"/>
    <property name="message" value="No @author tag allowed to promote common code ownership."/>
  </module>

  <module name="TreeWalker">
    <property name="fileExtensions" value="java"/>

    <!-- Required to enable SuppressionCommentFilter -->
    <module name="FileContentsHolder"/>

    <!--
    ===================================================================
    Checks for Javadoc Comments.
    ===================================================================
    -->

    <!-- Require javadoc for all class and interface definitions and
         email addresses in author tags. -->
    <module name="JavadocType">
      <property name="scope" value="anoninner" />
    </module>

    <!-- Require javadoc for at least package scope methods. Allow
         missing param tags since these often just repeat the param
         name with some obvious text-->
    <module name="JavadocMethod">
      <property name="scope" value="package"/>
      <property name="allowMissingParamTags" value="true"/>
      <property name="allowMissingReturnTag" value="true"/>
      <property name="allowUndeclaredRTE" value="true"/>
    </module>

    <!-- Require javadoc for variables visible outside their class. -->
    <module name="JavadocVariable">
      <property name="scope" value="package"/>
    </module>

    <!-- Require non-empty javadoc in all scopes. -->
    <module name="JavadocStyle">
      <property name="scope" value="anoninner" />
      <property name="checkEmptyJavadoc" value="true" />
    </module>

    <!--
    ===================================================================
    Checks for Naming Conventions.
    ===================================================================
    -->

    <!-- <module name="AbstractClassName"/>  -->
    <module name="ConstantName"/>
    <module name="ClassTypeParameterName"/>
    <module name="LocalFinalVariableName" />
    <module name="LocalVariableName"/>
    <module name="MemberName" />
    <module name="MethodName" />
    <module name="MethodTypeParameterName"/>

    <!-- Disallow underscores and uppercase letters in package names -->
    <module name="PackageName">
      <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
    </module>
    <module name="ParameterName"/>
    <module name="StaticVariableName" />
    <module name="TypeName" />

    <!--
    ===================================================================
    Checks for Imports.
    ===================================================================
    -->

    <module name="AvoidStarImport" />
    <module name="IllegalImport">
      <property name="illegalPkgs" value="org.testng.Assert,org.testng.FileAssert"/>
    </module>
    <module name="RedundantImport" />
    <module name="UnusedImports">
    	<property name="processJavadoc" value="true" />
    </module>
    <!-- keep imports grouped and sorted -->
    <!-- 
    <module name="ImportOrder">
      <property name="groups" value="antlr,com,de,edu,java,javax,jdbm,junit,net,org" />
      <property name="ordered" value="true" />
      <property name="separated" value="true" />
      <property name="caseSensitive" value="true" />
    </module>
    -->
    <module name="AvoidStaticImport"/>

    <!--
    ===================================================================
    Checks for Size Violations.
    ===================================================================
    -->

    <!-- Long methods should be refactored into smaller ones. -->
    <module name="ExecutableStatementCount">
      <property name="max" value="40"/>
    </module>

    <!-- Although the limit is set to 120, most lines should not be
         longer than 80-90 characters (especially in javadoc). Long
         lines make code reading more difficult. -->
    <module name="LineLength">
      <property name="max" value="120" />
      <!-- Allow long import lines. Allow lines that begin with " * ",
           followed by just one word, such as within a javadoc
           comment. -->
      <property name="ignorePattern" value="(^import +)|(^ *\* *[^ ]+$)|(^ *\* *@see)|(^ *\* *@author)|(^ *\* *\$Id)"/>
    </module>
    <module name="MethodLength"/>
    <module name="AnonInnerLength">
      <property name="max" value="40"/>
    </module>
    <module name="ParameterNumber">
      <property name="max" value="8"/>
    </module>
    <module name="OuterTypeNumber"/>

    <!--
    ===================================================================
    Checks for whitespace.
    ===================================================================
    -->

    <module name="EmptyForInitializerPad"/>
    <module name="EmptyForIteratorPad"/>
    <module name="MethodParamPad"/>

    <!-- Allow whitespace after "{" and after a type cast -->
    <module name="NoWhitespaceAfter">
      <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS" />
    </module>
    <module name="NoWhitespaceBefore"/>
    <module name="OperatorWrap"/>
    <module name="ParenPad"/>
    <module name="TypecastParenPad"/>
    <module name="WhitespaceAfter"/>
    <module name="WhitespaceAround"/>
    <module name="GenericWhitespace"/>


    <!--
    ===================================================================
    Modifier Checks.
    ===================================================================
    -->

    <module name="ModifierOrder"/>
    <!-- Allow redundant final declarations on methods. This
         information is valuable when a class needs to be changed to
         non-final. -->
    <module name="RedundantModifier">
      <property name="tokens" value="VARIABLE_DEF, ANNOTATION_FIELD_DEF" />
    </module>

    <!--
    ===================================================================
    Checks for blocks.
    ===================================================================
    -->

    <!-- Empty blocks and empty catch handlers must be documented! -->
    <module name="EmptyBlock">
      <property name="option" value="text" />
    </module>
    <module name="LeftCurly"/>
    <module name="NeedBraces"/>
    <module name="RightCurly"/>
    <module name="AvoidNestedBlocks"/>

    <!--
    ===================================================================
    Checks for common coding problems.
    ===================================================================
    -->

    <!-- We can perfectly live without trailing commas. -->
    <!-- <module name="ArrayTrailingComma" /> -->

    <!-- Inline conditionals should be avoided in general, but
         sometimes their use makes expressions more concise. -->
    <!-- <module name="AvoidInlineConditionals" /> -->

    <module name="CovariantEquals" />
    <module name="EmptyStatement" />
    <module name="EqualsHashCode" />

    <!-- See also: http://renaud.waldura.com/doc/java/final-keyword.shtml -->
<!--TODO    <module name="FinalLocalVariable" /> -->

    <module name="HiddenField">    	
    	<property name="ignoreSetter" value="true"/>
    	<property name="ignoreConstructorParameter" value="true"/>
    </module>

    <!-- Booleans and Strings do not need to be explicitly constructed. -->
    <module name="IllegalInstantiation">
      <property name="classes" value="java.lang.Boolean,java.lang.String"/>
    </module>

    <!-- In general all tokens are fine. -->
    <!-- <module name="IllegalToken" />  -->

    <!-- Avoid octal literal syntax for integers. -->
    <module name="IllegalTokenText">
      <property name="tokens" value="NUM_INT,NUM_LONG"/>
      <property name="format" value="^0[^lx]"/>
      <property name="ignoreCase" value="true"/>
    </module>
    <module name="InnerAssignment" />

    <!-- It is unpractical to define constants for all numbers -->
    <!-- <module name="MagicNumber" /> -->

    <module name="MissingSwitchDefault" />
    <module name="ModifiedControlVariable"/>

    <!-- RedundantThrows needs access to compiled classes. -->
    <!-- <module name="RedundantThrows" /> -->

    <module name="SimplifyBooleanExpression" />
    <module name="SimplifyBooleanReturn" />
    <module name="StringLiteralEquality" />

    <!-- The default 1 is not realistic. -->
    <module name="NestedIfDepth" >
      <property name="max" value="3"/>
    </module>

    <module name="NestedTryDepth" />
    <module name="SuperClone" />
    <module name="SuperFinalize" />
    <module name="IllegalCatch" />
    <module name="IllegalThrows" />
    <module name="PackageDeclaration" />
    <module name="JUnitTestCase" />

    <!-- Favor early exit approach over deeply nested blocks with single-return at end. -->
    <module name="ReturnCount">
      <property name="max" value="3"/>
    </module>

    <module name="IllegalType" />
    <module name="DeclarationOrder" />
    <module name="ParameterAssignment" />
    <module name="ExplicitInitialization" />
    <module name="DefaultComesLast"/>

    <!-- We don't need default constructors for all say Action sub-classes -->
    <!-- <module name="MissingCtor"/> -->

    <module name="FallThrough"/>

    <!-- While duplication is often a bad thing, it is difficult to
         get good and hard limits for violations. -->
    <!--     <module name="MultipleStringLiterals">  -->
    <!--       <property name="ignoreStringsRegexp" value='^".{0,30}?"$'/> -->
    <!--       <property name="allowedDuplicates" value="1"/> -->
    <!--     </module> -->

    <module name="MultipleVariableDeclarations"/>

    <!-- We don't want lots of verbose this.* syntax -->
    <!-- <module name="RequireThis"/> -->

    <module name="UnnecessaryParentheses"/>
    <module name="EqualsAvoidNull"/>
    <module name="NoClone"/>
    <module name="NoFinalizer"/>


    <!--
    ===================================================================
    Class Design Checks.
    ===================================================================
    -->

    <module name="VisibilityModifier"/>
    <module name="FinalClass" />
    <module name="InterfaceIsType" />
    <module name="HideUtilityClassConstructor" />

    <!-- This enforces a very specific design style. -->
    <!-- <module name="DesignForExtension" /> -->

    <module name="MutableException" />

    <!-- Throwing many different exceptions makes exception handling
         in the caller very complex. -->
    <module name="ThrowsCount">
      <property name="max" value="2"/>
    </module>

    <!--
    ===================================================================
    Metrics Checks.
    ===================================================================
    -->

    <module name="BooleanExpressionComplexity"/>
    <!-- Avoid complex classes with many dependencies -->
    <module name="ClassDataAbstractionCoupling">
      <property name="max" value="20"/>
    </module>
    <module name="ClassDataAbstractionCoupling">
        <property name="severity" value="warning"/>
        <property name="max" value="15"/>
    </module>
    <module name="ClassFanOutComplexity">
        <property name="max" value="25"/>
    </module>
    <module name="ClassFanOutComplexity">
        <property name="severity" value="warning"/>
        <property name="max" value="20"/>
    </module>


    <!-- 10 is hard to achieve. -->
    <module name="CyclomaticComplexity">
      <property name="max" value="15"/>
    </module>
    <module name="CyclomaticComplexity">
        <property name="severity" value="warning"/>
        <property name="max" value="12"/>
    </module>

    <module name="NPathComplexity" />

    <!-- NCSS mostly duplicates other metrics and checks. We don't
         want to take the effort to balance all involved
         parameters. -->
    <!-- <module name="JavaNCSS"/> -->


    <!--
    ===================================================================
    Annotations
    ===================================================================
    -->

    <module name="AnnotationUseStyle"/>
    <module name="MissingDeprecated"/>
    <module name="MissingOverride"/>

    <!--
    ===================================================================
    Miscellaneous Checks.
    ===================================================================
    -->
    <!-- WARN:    <module name="GenericIllegalRegexp"> -->
    <!-- WARN:      <property name="format" value="System\.out\.println"/> -->
    <!-- WARN:      <property name="message" value="Consider using logging instead of System.out.println"/> -->
    <!-- WARN:    </module> -->

    <!-- WARN:    <module name="GenericIllegalRegexp"> -->
    <!-- WARN:      <property name="format" value="System\.err\.println"/> -->
    <!-- WARN:      <property name="message" value="Consider using logging instead of System.err.println"/> -->
    <!-- WARN:    </module> -->

    <!-- FIXMEs and DOCMEs should be fixed before submitting code -->
    <module name="TodoComment">
      <property name="format" value="([fF][iI][xX][mM][eE])|([dD][oO][cC][mM][eE])"/>
    </module>
    <!-- Haven't found a single consistent rule for all unwanted main methods, yet. -->
    <!-- <module name="UncommentedMain" /> -->
    <module name="UpperEll"/>
    <module name="ArrayTypeStyle"/>

    <!-- Good rule, but a bit uncommon and leads to long method signatures. -->
    <!-- <module name="FinalParameters"/> -->

    <module name="Indentation"/>
    <!-- Many single-line trailing comments are not really helpful. Use full lines. -->
    <!-- <module name="TrailingComment"/> -->

  </module>
</module>
